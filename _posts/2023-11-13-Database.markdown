---
layout: post
title: "Problem and Database"
---
Hi! My name is Gergely Kiszi and I am a member of a 10-month Java programming course at [everyone codes](https://everyonecodes.io/). Our last exercise is to write a web applicatipon wich is a  a CRUD app, and also brings us joy. So i have thought through all the things that we have learned in the last few months, and what can be done, and maybe can be useful for me too. An app that can save my recipes and calcule the nutritional value of the dish would be perfect for this exercise. 
In this blog post I will just analyze the datastructure and the exercise.
## Data structure: 
### Ingredinet
I need an `Id`, a `name`, a `calories`, `protein`, `carbohydrates`, `fat`, `fiber`, a  `measurement` and a `weight` for all the ingredients in my databank. All the nutritional values would be saved as 100 g just like in the packaging of food. The `measurement` is a text to identify how is saved the ingridnient is our database (g, ml, pr piece). The `weight` is the weight of one unit. By gramm it is always 1, but all other ingredient where ther measurem,net is not gramm, i need to know how much this unit weight. (for example for 1 piece of egg the weight is 60, or 1 ml milk is the 1,031)
With this class the user shouldnt be able to connect in the front page, but i would like to write an API.  
### Recipe
I need an `Id`, `name `, `date` of posting, a `description`, a `manual`. The manual is the steps of the cooking proccess. I could also make a list of the steps, but it would make an other table in our database and make the whole process more compex. 
I also need a list of Ingredient.
This entity that is the improtant entity to the user interface. 
There would be maybe some chamges in these Classes or some other classes or Enums that i have to use. 
## Database with Hibernate:
### Ingredinet
```java
@Entity
public class Ingredient {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "ingredient_id")
    private Long id;
    @NotEmpty
    @Column(unique = true)
    private String name;
    @Positive
    private Double calories;
    @Positive
    private Double protein;
    @Positive
    private Double carbohydrates;
    @Positive
    private  Double fat;
    @Positive
    private  Double fiber;
    @NotEmpty
    private String measurement;
    @NotEmpty
    private double weight;
}
```

```java
@Entity
public class Recipe {
    @Id 
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(unique = true)
    private String name;
    @Column(name = "date_of_posting")
    private LocalDateTime dateOfPosting;
    @NotEmpty
    @Column(columnDefinition = "TEXT")
    private String description;
    @NotEmpty
    @Column(columnDefinition = "TEXT")
    private String manual;

    @OneToMany(mappedBy = "recipe", cascade = CascadeType.ALL)
    private List<RecipeIngredient> recipeIngredients;
}
```
## Join table:
Now i had to create a join table between the 2 tables.  In my case for every `recipe` has a list of `ingredeint` with an amount from them. They have a ManyToMany relations (which can be generated by hibernate), but because of the amountOf property i have to creadted a new entity `RecipeIngredient`.
```java
public class RecipeIngredient {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @ManyToOne
    @JoinColumn(name = "ingredient")
    private Ingredient ingredient;

    @NonNull
    @Column(name = "amount_of_ingredient")
    private Double amountOf;

    @ManyToOne
    @JoinColumn(name = "recipe")
    @JsonIgnore
    private Recipe recipe;
}
```

It is easy to see how it is working. There are 3 relation annotation. There is one `@OnetoMany` in my `Recipe` entity becouse every recipe can have more then one `RecipeIngredeint`, and there is one  `@ManyToOne` in the `RecipeIngredeint` which is the inverse of the previous one. The third is a `@ManyToOne` in the `RecipeIngredeint` to the `Ingredeint`, all the steps use only one ingredient, but an ingredient can be used in more recipes. 

Thanks for reading my blog, and I hope it helped you!