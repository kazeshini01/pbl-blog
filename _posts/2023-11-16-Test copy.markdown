---
layout: post
title: "Hibernate Join Table: Splitting Many-to-Many Connectissson"
---
Greeting! As a beginner programmer, I've developed a Spring Boot application that saves recipes and calculates their nutritional values. I've employed a PostgreSQL database, managed through a CRUD API, to handle all the ingredients.

| Command | Description |
| --- | --- |
| `git status` | List all *new or modified* files |
| `git diff` | Show file differences that **haven't been** staged |

## Problem:
My challenge arose in establishing a connection between the ingredient and recipe tables, which involves a many-to-many relationship. The join-table would be created by Hibernate with the right annotations. However, in my case, there is additional data in this table, as we need to store the amount of the ingredient as well.

| Command | Description |
| --- | --- |
| `git status` | List all *new or modified* files |
| `git diff` | Show file differences that **haven't been** staged |

 
## Solution
I created the join table manually. Instead of using a many-to-many relationship, I introduced a new entity with two many-to-one relations.
```java
@Entity
public class RecipeIngredient {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @ManyToOne
    @JoinColumn(name = "ingredient_id")
    private Ingredient ingredient;

    @NonNull
    @Column(name = "amount_of_ingredient")
    private Double amountOf;

    @ManyToOne
    @JoinColumn(name = "recipe_id")
    @JsonIgnore
        private Recipe recipe;
}
```

After implementing this solution, another question arose: How should I handle the recipes?

In the Hibernate-generated solution, there is a list of ingredients in every `Recipe`. However, with the manually created join table solution, having this list might be unnecessary. The decision to include or exclude the list in the Recipe class introduces a trade-off: 
 1. Bidierctional relationship with list:
    * Pros: Fewer queries, less complexity.
    * Cons: In-memory redundancy.
2. Unidirectonal relationship:
    * Pros: Simpler, cleaner data model.
    * Cons: More queries, increased complexity.

Both solutions offer advantages and disadvantages, and after careful consideration, I have opted for the bidirectional solution.
Thanks for reading my blog, and I hope it helped you!